#+TITLE: Prefixer.go

* Installation
#+begin_example zsh
go get -u -v github.com/NightMachinary/prefixer
#+end_example

* Usage
** Manual
#+BEGIN_SRC bash :results verbatim :exports both
prefixer --help
#+END_SRC

#+RESULTS:
#+begin_example
Prefixer is a general tool that allows you to manipulate records stored in a string format.

The string '\x00' will be converted to the null character in <add-prefix>, <add-postfix>, <rm-prefix>, <isep>, and <osep>. (No escape mechanism has been implemented for them yet.)
This is because there does not seem to be a way to pass this character as an argument on the OS level.

The separators are by default the newline character '\n'.

When tracking is enabled, the magic string 'PREFIXER_LINENUMBER' in <add-prefix>, <add-postfix>, and <replace> will be replaced with the line number of the current record.

Usage:
  prefixer [options]
  prefixer rm [options --] [<record>...]
  prefixer replace [options --] [(<from> <to>)...]
  prefixer -h | --help

  rm: will skip the records supplied (i.e., remove those records from the output). This happens after potentially trimming the record.

Options:
  -a --add-prefix=<add-prefix>  Adds this prefix to the beginning of each record.
  -p --add-postfix=<add-postfix>  Adds this to the end of each record.
  -c --case-sensitivity=<case-sensitivity>  Sets the case sensitivity for --remove-prefix: no, yes. (Default: yes)
  -r --remove-prefix=<rm-prefix>  Removes this prefix from the beginning of each record.
  -s --skip-empty  Skip empty records (after the removal of --remove-prefix).
  -i --input-sep=<isep>  Input record separator.
  -o --output-sep=<osep>  Output record separator.
  -t --trim  Trims whitespace from around each record before other transformations have been done.
  --process-include=<process-include>  Ranges of the input records to process. This uses fzf's range syntax. Unprocessed records will be output as they are.
  --rm-ansi  Strip the ANSI color codes from input records when testing for equality in rm or replace.
  --rm-x  Enable \x00 to NUL conversion for <record>.
  --from-x  Enable \x00 to NUL conversion for <from>.
  --to-x  Enable \x00 to NUL conversion for <to>.
  --replace=<replace>  Replace all records without matches in <from> records with <replace>. '$1' will be expanded to the original record.
  -l --location=<loc-file>  Enables tracking the starting line number of each record, and prints those numbers to the supplied file (separated by newlines). Use /dev/null to just enable the tracking.
  -h --help  Show this screen.
#+end_example

** Examples

#+begin_src bash :results verbatim :exports both
echo "Green Paint, Red Paint, Yellow Paint" | prefixer -i ", " -r "Green " -a "Cute "
#+end_src

#+RESULTS:
#+begin_example
Cute Paint
Cute Red Paint
Cute Yellow Paint
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap example
echo "Green Paint, Red Paint, Yellow Paint" | prefixer --case-sensitivity no -i ", " -r "grEEn " -a "Cute "
#+end_src

#+RESULTS:
#+begin_example
Cute Paint
Cute Red Paint
Cute Yellow Paint
#+end_example

#+begin_src bash :results verbatim :exports both
echo "Green Paint, Red Paint, Yellow Paint" | prefixer -i ", " -o $'\n---\n' -r "Green " -a "PREFIXER_LINENUMBER: Cute " -l /dev/null
#+end_src

#+RESULTS:
#+begin_example
1: Cute Paint
---
1: Cute Red Paint
---
1: Cute Yellow Paint
#+end_example

#+begin_src bash :results verbatim :exports both
echo "Green Paint

Red Paint

     Yellow Paint" | prefixer -i $'\n' -o $'\n' -r "Green " -a "PREFIXER_LINENUMBER: Cute " -l /dev/null
#+end_src

#+RESULTS:
#+begin_example
1: Cute Paint
2: Cute
3: Cute Red Paint
4: Cute
5: Cute      Yellow Paint
6: Cute
#+end_example

#+begin_src bash :results verbatim :exports both
echo "Green Paint

Red Paint

     Yellow Paint" | prefixer --skip-empty -i $'\n' -o $'\n' -r "Green " -a "PREFIXER_LINENUMBER: Cute " -l /tmp/locationData
#+end_src

#+RESULTS:
#+begin_example
1: Cute Paint
3: Cute Red Paint
5: Cute      Yellow Paint
#+end_example

#+begin_src bash :results verbatim :exports both
cat /tmp/locationData
#+end_src

#+RESULTS:
#+begin_example
1
3
5
#+end_example

#+begin_src bash :results verbatim :exports both
echo "a,  snake ,d" | prefixer rm -i , -o '-' --trim -r sn a ake  -a "hi "
#+end_src

#+RESULTS:
#+begin_example
hi d
#+end_example

#+begin_src bash :results verbatim :exports both
echo "a,  snake ,d" | prefixer rm -i , -o '-' --trim -r sn -- d  -a "hi "
#+end_src

#+RESULTS:
#+begin_example
a-ake
#+end_example

#+begin_src bash :results verbatim :exports both
echo "a,  snake ,d" | prefixer rm -i , -o '-' -r sn -- d  -a "hi "
#+end_src

#+RESULTS:
#+begin_example
a-  snake -d
#+end_example

Let's define some helper functions:

#+begin_src bsh.dash :results verbatim :exports both :wrap example
arrN () {
    print -nr -- "${(pj.\n.)@}"
}
arrN "This writes its args in new lines." "See?" "1 2 3"
#+end_src

#+RESULTS:
#+begin_example
This writes its args in new lines.
See?
1 2 3
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap example
arrN red orange yellow green blue purple gray black aqua teal | prefixer --process-include 2..-4,-1 --add-prefix '<' --add-postfix '>'
#+end_src

#+RESULTS:
#+begin_example
red
<orange>
<yellow>
<green>
<blue>
<purple>
<gray>
black
aqua
<teal>
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap example
arrN "fish" "green mold" "green" "yellow mold" "daddy" | prefixer replace --skip-empty --remove-prefix 'yellow ' --add-prefix 'hi, ' --add-postfix '!' -- "fish" '' "green" red mold wolf
#+end_src

#+RESULTS:
#+begin_example
hi, green mold!
hi, red!
hi, wolf!
hi, daddy!
#+end_example

Note that in the following example, the last record is =IV\n= and not =IV=, and so it is not replaced.
#+begin_src bsh.dash :results verbatim :exports both :wrap example
echo a IV b c IV | prefixer replace -i ' ' -o ' ' IV 4
#+end_src

#+RESULTS:
#+begin_example
a 4 b c IV
#+end_example

*** Search and replace literal strings
#+begin_src bash :results verbatim :exports both
function replace() {
    prefixer -i "$1" -o "$2"
}
replace wolf "cute rabbit" << "EOF"
The wolf (Canis lupus[a]), also known as the gray wolf or grey wolf, is a large canine native to Eurasia and North America. More than thirty subspecies of Canis lupus have been recognized, and gray wolves, as colloquially understood, comprise non-domestic/feral subspecies.
EOF
#+end_src

#+RESULTS:
#+begin_example
The cute rabbit (Canis lupus[a]), also known as the gray cute rabbit or grey cute rabbit, is a large canine native to Eurasia and North America. More than thirty subspecies of Canis lupus have been recognized, and gray wolves, as colloquially understood, comprise non-domestic/feral subspecies.
#+end_example

*** Test-ish examples
These examples are mostly meant as unit tests.

#+begin_src bsh.dash :results verbatim :exports both :wrap example
arrN 1 2 3 a$'\0'b | prefixer replace --from-x -- 1 9 5 6 1 "hii\x00i\!" 'a\x00b' wow | cat -v
#+end_src

#+RESULTS:
#+begin_example
hii\x00i\!
2
3
wow
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap example
arrN 1 2 3 a$'\0'b | prefixer replace --from-x --to-x -- 1 9 5 6 1 "hii\x00i\!" 'a\x00b' wow | cat -v
#+end_src

#+RESULTS:
#+begin_example
hii^@i\!
2
3
wow
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap example
arrN 1 2 3 a$'\0'b | prefixer replace --to-x -- 1 9 5 6 1 "hii\x00i\!" 'a\x00b' wow | cat -v
#+end_src

#+RESULTS:
#+begin_example
hii^@i\!
2
3
a^@b
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap example
arrN 1 2 3 a$'\0'b | prefixer replace -- 1 9 5 6 1 "hii\x00i\!" 'a\x00b' wow | cat -v
#+end_src

#+RESULTS:
#+begin_example
hii\x00i\!
2
3
a^@b
#+end_example

* Benchmarks


#+begin_src bsh.dash :results verbatim :exports both
hyperfine --warmup 10  "<$attic sd "$'\36'" H" "<$attic tr "$'\36'" H" "<$attic prefixer -s -i "$'\36'" -o 'H' "
#+end_src

#+RESULTS:
#+begin_example
Benchmark #1: </Users/evar/cellar/attic//.darkattic sd  H
  Time (mean ± σ):       5.0 ms ±   1.3 ms    [User: 1.7 ms, System: 1.9 ms]
  Range (min … max):     3.6 ms …  14.0 ms    186 runs

  Warning: Command took less than 5 ms to complete. Results might be inaccurate.
  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet PC without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.

Benchmark #2: </Users/evar/cellar/attic//.darkattic tr  H
  Time (mean ± σ):       5.2 ms ±   0.7 ms    [User: 3.0 ms, System: 2.0 ms]
  Range (min … max):     4.4 ms …  10.2 ms    177 runs

  Warning: Command took less than 5 ms to complete. Results might be inaccurate.
  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet PC without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.

Benchmark #3: </Users/evar/cellar/attic//.darkattic prefixer -s -i  -o 'H'
  Time (mean ± σ):       8.3 ms ±   0.9 ms    [User: 4.3 ms, System: 2.9 ms]
  Range (min … max):     7.1 ms …  16.0 ms    141 runs

  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet PC without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.

Summary
  '</Users/evar/cellar/attic//.darkattic sd  H' ran
    1.04 ± 0.31 times faster than '</Users/evar/cellar/attic//.darkattic tr  H'
    1.67 ± 0.48 times faster than '</Users/evar/cellar/attic//.darkattic prefixer -s -i  -o 'H' '
#+end_example

#+begin_src bash :results verbatim :exports both
hyperfine --warmup 5 "arrN {1..2000} | prefixer -r 12" "arrN {1..2000} | rmprefix 12 '' '\x00'" "arrN {1..2000} | prefixer -r 12 -a 'hi you ' -o '\x00' -l /dev/null"
#+end_src

#+RESULTS:
#+begin_example
Benchmark #1: arrN {1..2000} | prefixer -r 12
  Time (mean ± σ):      11.6 ms ±  12.0 ms    [User: 8.4 ms, System: 4.4 ms]
  Range (min … max):     7.3 ms …  90.0 ms    151 runs

Benchmark #2: arrN {1..2000} | rmprefix 12 '' '\x00'
  Time (mean ± σ):       6.6 ms ±   3.8 ms    [User: 5.5 ms, System: 3.1 ms]
  Range (min … max):     4.3 ms …  39.3 ms    174 runs

Benchmark #3: arrN {1..2000} | prefixer -r 12 -a 'hi you ' -o '\x00' -l /dev/null
  Time (mean ± σ):      10.4 ms ±   3.8 ms    [User: 8.6 ms, System: 4.5 ms]
  Range (min … max):     7.3 ms …  37.2 ms    150 runs

Summary
  'arrN {1..2000} | rmprefix 12 '' '\x00'' ran
    1.57 ± 1.07 times faster than 'arrN {1..2000} | prefixer -r 12 -a 'hi you ' -o '\x00' -l /dev/null'
    1.75 ± 2.07 times faster than 'arrN {1..2000} | prefixer -r 12'
#+end_example

* Licenses

Dual-licensed under MIT and GPL v3 or later.
